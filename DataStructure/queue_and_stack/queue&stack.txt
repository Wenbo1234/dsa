
队列：先入先出的数据结构

队列的实现。
循环队列的实现。
队列的用法。

Practice：
数据流中的移动平均值

思路：
定义一个window大小的queue。

push新number到queue。
求得sum；
queue.size()>=window.size()
pop queue 在pushqueu。


队列和广度优先搜索

广度优先搜索（BFS）的一个常见应用是找出从根节点到目标节点的最短路径。

广度优先搜索 - 模板
之前，我们已经介绍了使用BFS的两个主要方案：遍历或找出最短路径。通常，这发生在树或图中。
正如我们在章节描述中提到的，BFS也可以用于更抽象的场景中。





栈：后入先出的数据结构
在LIFO数据结构中，将首先处理添加到队列的最新元素。
与队列不同，栈是一个LIFO数据结构。通常，插入操作在栈中被称为入栈push。与队列类似，总是在
堆栈的末尾添加一个新元素。但是，删除操作，退栈pop，将始终删除队列中相对于它的最后一个元素。

栈的用法：



栈和深度优先搜索




小结



